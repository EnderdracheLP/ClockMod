name: NDK build 1.13.2 Legacy Branch

on:
  workflow_dispatch:
  push:
    branches: [ 1.13.2 ]
  pull_request:
    branches: [ 1.13.2 ]
    
jobs:
  build:
    env:
     module_id: clockmod
     version: 1.4.0-L-${{ github.run_number }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true
    - name: Install Powershell
      run: sudo apt-get install -y powershell

    - name: Cache Android NDK
      id: cache-ndk
      uses: actions/cache@v2
      env:
        cache-name: cache-ndk
        ndkname: android-ndk-r22
      with:
        path: ndk
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.ndkname }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-${{ env.ndkname }}
    
    - name: Install Android NDK
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      env:
        ndkname: android-ndk-r22
      run: |
        wget -q -O ndk.zip https://dl.google.com/android/repository/${ndkname}-linux-x86_64.zip
        unzip -q ndk.zip
        mv ${ndkname} ndk
      
    - name: Create ndkpath.txt
      run: |
        cd ndk
        pwd > ${GITHUB_WORKSPACE}/ndkpath.txt

    - name: Get QPM
      #if: steps.cache-qpm.outputs.cache-hit != 'true'
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        name: QPM-ubuntu-x64
        path: QPM
        repo: sc2ad/QuestPackageManager

    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
        BSVersion: 1.13.2
      with:
        path: QPM_Temp
        key: ${{ env.BSVersion }}-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('qpm.json', '.github/buildMod.yml') }}
        restore-keys: |
          ${{ env.BSVersion }}-${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-${{ env.cache-name }}
    - name: QPM Restore
      run: |
        chmod +x ./QPM/QPM
        ./QPM/QPM restore

    - name: Check dependency Folders
      run: |
        echo "Checking extern Folder"
        ls -lh ${GITHUB_WORKSPACE}/extern/
        echo ""
        echo "Checking QPM_Temp Folders"
        ls -lh QPM_Temp/
        echo ""
        echo "Listing beatsaber-hook folder"
        ls QPM_Temp/beatsaber-hook/
        echo ""
        echo "Listing codegen folder"
        ls -lh QPM_Temp/codegen/
        echo ""
        echo "Listing all .so files in QPM_Temp"
        find QPM_Temp -type f -name "*.so"
#      continue-on-error: true

    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./build.ps1 --actions
    - name: Build BMBF Mod
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./buildBMBF.ps1 --package
    - name: Get Library Name
      id: libname
      run: |
        cd ./libs/arm64-v8a/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"
    - name: Upload non-debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.libname.outputs.NAME }}
        path: ./libs/arm64-v8a/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error
    - name: Upload debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: debug_${{ steps.libname.outputs.NAME }}
        path: ./obj/local/arm64-v8a/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error
    - name: Upload BMBF Mod
      uses: actions/upload-artifact@v2
      with:
        name: Clockmod-(Unzip-for-BMBF-ZIP)
        path: ./Clockmod.zip
        if-no-files-found: error
